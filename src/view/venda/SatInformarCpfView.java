/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.venda;

import com.itextpdf.text.BadElementException;
import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.xml.bind.DatatypeConverter;
import model.bean.principal.Venda;
import model.dao.fiscal.SatErroOuAlertaDAO;
import org.w3c.dom.Document;
import static ouroboros.Ouroboros.FROM_SAT_PATH;
import static ouroboros.Ouroboros.MAIN_VIEW;
import static ouroboros.Ouroboros.SAT_CODIGO_ATIVACAO;
import static ouroboros.Ouroboros.SAT_PRINTER;
import static ouroboros.Ouroboros.TO_PRINTER_PATH;
import static ouroboros.Ouroboros.TO_SAT_PATH;
import printing.PrintPDFBox;
import sat.MwSat;
import sat.SAT;
import util.MwIOFile;
import util.MwString;
import util.MwXML;
import view.Toast;

/**
 *
 * @author ivand
 */
public class SatInformarCpfView extends javax.swing.JDialog {
    private Venda venda;
    
    /**
     * Creates new form SatInformarCpfView
     */
    private SatInformarCpfView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public SatInformarCpfView(java.awt.Frame parent, Venda venda) {
        super(parent, true);
        initComponents();
        this.setLocationRelativeTo(MAIN_VIEW);
        
        this.venda = venda;
    }
    
    public Venda getVenda(){
        return venda;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtCpfCnpj = new javax.swing.JFormattedTextField();
        btnCancelar = new javax.swing.JButton();
        btnConfirmar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtRetorno = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Informar CPF");
        setResizable(false);

        txtCpfCnpj.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCpfCnpj.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnCancelar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnConfirmar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnConfirmar.setText("Confirmar");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });

        txtRetorno.setColumns(20);
        txtRetorno.setLineWrap(true);
        txtRetorno.setRows(5);
        jScrollPane1.setViewportView(txtRetorno);

        jLabel1.setText("Retorno SAT");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(txtCpfCnpj)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 66, Short.MAX_VALUE)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtCpfCnpj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfirmar)
                    .addComponent(btnCancelar))
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
        String destCpfCnpj = txtCpfCnpj.getText();
        
        venda.setDestCpfCnpj(destCpfCnpj);
        
        Document doc = MwSat.prepareDocument(venda);
        
        String docString = MwXML.convertDocumentToString(doc) ;
        docString = MwString.removeAccents(docString);

        System.out.println("doc: " + docString);
        doc = MwXML.convertStringToDocument(docString);
        
        int numeroSessao = new Random().nextInt(999999);

        String toSatXmlFile = TO_SAT_PATH + numeroSessao + ".xml";
        MwXML.createFile(doc, toSatXmlFile);
        
        new Toast("Gerando Cupom SAT...");
        
        File file = new File(toSatXmlFile);
        
        String cf_e = MwIOFile.readFullContent(toSatXmlFile);
        
        String ret = SAT.INSTANCE.EnviarDadosVenda(numeroSessao, SAT_CODIGO_ATIVACAO, cf_e);
        String[] reto = ret.split(Pattern.quote("|"));
        //mainView.detalheSetText(ret);
        //mainView.toSatAppendText("Resposta do SAT: " + reto[3]);
        
        txtRetorno.setText(ret);
        txtRetorno.append("Resposta do SAT: " + reto[3]);
        
        String returnCode = reto[1];
        String errorCode = reto[2];
        //JOptionPane.showMessageDialog(MAIN_VIEW, errorCode);
        if(!returnCode.equals("06000") || !errorCode.equals("0000")){
            //On error
            SatErroOuAlertaDAO eaDao = new SatErroOuAlertaDAO();
            String descricao = eaDao.findByCodigo(errorCode).getDescricao();
            String errorMessage = "Erro: " + errorCode + " " + descricao;
            
            txtRetorno.append(errorMessage);

            //move fileFromApp to processed subfolder
            //mainView.toSatAppendText("Movendo arquivo com erro para pasta rejeitados...");
            file.renameTo(new File(TO_SAT_PATH + "/rejeitados/" + file.getName()));
            //mainView.toSatAppendText("Pronto");
            //mainView.toSatAppendText("");

        }else{
            //Accepted
            /*
            String a = reto[6]; // string "a" recebe vetor com a base64
            byte[] byteArray = Base64.decode(a);// byteArray descodifica "a" 
            String decodedString = new String(byteArray);// String decodedString recebe byteArray.
            */
            
            String base64String = reto[6]; // string "a" recebe vetor com a base64
            byte[] byteArray = DatatypeConverter.parseBase64Binary(base64String);
            String decodedString = new String(byteArray);

            //save returned CFe
            List<String> lines = new ArrayList<>();
            lines.add(decodedString);

            //Chave de acesso = chave consulta =(
            doc = MwXML.convertStringToDocument(decodedString);
            String chaveDeAcesso = MwXML.getAttributeValue(doc, "infCFe", "Id").substring(3);

            
            String anoMes = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM"));
            
            //mainView.toSatAppendText("Salvando arquivo CFe de retorno");
            String xmlFileFromSat = "AD" + chaveDeAcesso + ".xml";
            String pathXmlFileFromSat = FROM_SAT_PATH + xmlFileFromSat;
            MwIOFile.writeFile(lines, pathXmlFileFromSat);
            //mainView.detalheSetText(decodedString);

            //move fileFromApp to processed subfolder
            //mainView.toSatAppendText("Movendo arquivo para pasta processados...");
            file.renameTo(new File(TO_SAT_PATH + "/processados/" + file.getName()));
            //mainView.toSatAppendText("Pronto");
            //mainView.toSatAppendText("");

            //toolBar.setStateToIdle();
            
            
            
            //PREPARAR PDF PARA IMPRESS√ÉO --------------------------------------
            //receive xml from Sat
            //mainView.fromSatAppendText("Gerando cupom...");
            String pdfFileToPrint = xmlFileFromSat.substring(0, xmlFileFromSat.length()-3) + ".pdf";
            try {
                MwSat.gerarCupom(FROM_SAT_PATH + xmlFileFromSat, TO_PRINTER_PATH + pdfFileToPrint);
            } catch (BadElementException | IOException e) {
                JOptionPane.showMessageDialog(rootPane, e, "Erro", JOptionPane.ERROR_MESSAGE);
            }
            
            //mainView.fromSatAppendText("Enviando cupom para impressora...");
            PrintPDFBox pPDF = new PrintPDFBox();
            System.out.println("SAT_PRINTER: " + SAT_PRINTER);
            pPDF.print(TO_PRINTER_PATH + pdfFileToPrint, SAT_PRINTER);
            
            
            //Mover arquivo processado
            
            String pathYearMonth = FROM_SAT_PATH + "/processados/" + anoMes + "/";
            new File(pathYearMonth).mkdir();
            File fileXmlFromSat = new File(pathXmlFileFromSat);
            fileXmlFromSat.renameTo(new File(pathYearMonth + xmlFileFromSat));
            
            dispose();
        }
        
        
        
        
    }//GEN-LAST:event_btnConfirmarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SatInformarCpfView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SatInformarCpfView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SatInformarCpfView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SatInformarCpfView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SatInformarCpfView dialog = new SatInformarCpfView(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField txtCpfCnpj;
    private javax.swing.JTextArea txtRetorno;
    // End of variables declaration//GEN-END:variables
}
